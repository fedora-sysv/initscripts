#!/bin/bash
# Network Interface Configuration System
# Copyright (c) 1996-2010 Red Hat, Inc. all rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

. /etc/init.d/functions

cd /etc/sysconfig/network-scripts
. ./network-functions

[ -f ../network ] && . ../network

CONFIG=${1}

need_config "${CONFIG}"

source_config

# Old BOOTP variable
if [ "${BOOTP}" = "yes" ]; then
    BOOTPROTO=bootp
fi

if [ "${BOOTPROTO}" = "bootp" -o "${BOOTPROTO}" = "dhcp" ]; then
    DYNCONFIG=true
fi

# load the module associated with that device
# /sbin/modprobe ${REALDEVICE}
is_available ${REALDEVICE}

# bail out, if the MAC does not fit
if [ -n "${HWADDR}" ]; then
    FOUNDMACADDR=$(get_hwaddr ${REALDEVICE})
    if [ "${FOUNDMACADDR}" != "${HWADDR}" -a "${FOUNDMACADDR}" != "${MACADDR}" ]; then
	    net_log $"Device ${DEVICE} has different MAC address than expected, ignoring."
	    exit 1
    fi
fi

# If the device is a bridge, create it with brctl, if available.
if [ "${TYPE}" = "Bridge" ]; then
      if [ ! -x /usr/sbin/brctl ]; then
	  net_log $"Bridge support not available: brctl not found"
	  exit 1
      fi
      if [ ! -d /sys/class/net/${DEVICE}/bridge ]; then
		/usr/sbin/brctl addbr ${DEVICE} || exit 1
      fi
      [ -n "${DELAY}" ] && /usr/sbin/brctl setfd ${DEVICE} ${DELAY}
      [ -n "${STP}" ] && /usr/sbin/brctl stp ${DEVICE} ${STP}
      [ -n "${PRIO}" ] && /usr/sbin/brctl setbridgeprio ${DEVICE} ${PRIO}
      [ -n "${AGEING}" ] && /usr/sbin/brctl setageing ${DEVICE} ${AGEING}
      # add the bits to setup driver parameters here
      for arg in $BRIDGING_OPTS ; do
          key=${arg%%=*};
          value=${arg##*=};
          if [ "${key}" != "multicast_router" -a "${key}" != "hash_max" -a "${key}" != "multicast_snooping" ]; then
              echo $value > /sys/class/net/${DEVICE}/bridge/$key
          fi
      done
fi

# If the device is a tap device, create it with tunctl, if available.
if [ "${TYPE}" = "Tap" ]; then
      if [ ! -x /usr/sbin/tunctl ]; then
          net_log  $"Tap support not available: tunctl not found"
          exit 1
      fi
      [ -n "${OWNER}" ] && OWNER="-u ${OWNER}"
      /usr/sbin/tunctl ${OWNER} -t ${DEVICE} > /dev/null
fi

# now check the real state
is_available ${REALDEVICE} || {
      if [ -n "$alias" ]; then
         net_log $"$alias device ${DEVICE} does not seem to be present, delaying initialization."
      else
         net_log $"Device ${DEVICE} does not seem to be present, delaying initialization."
      fi
      exit 1
}


# this isn't the same as the MAC in the configuration filename.  It is
# available as a configuration option in the config file, forcing the kernel
# to think an ethernet card has a different MAC address than it really has.
if [ -n "${MACADDR}" ]; then
   ip link set dev ${DEVICE} address ${MACADDR}
fi
if [ -n "${MTU}" ]; then
   ip link set dev ${DEVICE} mtu ${MTU}
fi

# is the device wireless? If so, configure wireless device specifics
is_wireless_device ${DEVICE} && . ./ifup-wireless

# slave device?
if [ "${SLAVE}" = yes -a "${ISALIAS}" = no -a "${MASTER}" != "" ]; then
    install_bonding_driver ${MASTER}
    grep -wq "${DEVICE}" /sys/class/net/${MASTER}/bonding/slaves 2>/dev/null || {
	/sbin/ip link set dev ${DEVICE} down
	echo "+${DEVICE}" > /sys/class/net/${MASTER}/bonding/slaves 2>/dev/null
    }
    ethtool_set

    exit 0
fi

# Bonding initialization. For DHCP, we need to enslave the devices early,
# so it can actually get an IP.
if [ "$ISALIAS" = no ] && is_bonding_device ${DEVICE} ; then
    install_bonding_driver ${DEVICE}
    /sbin/ip link set dev ${DEVICE} up
    for device in $(LANG=C grep -l "^[[:space:]]*MASTER=['\"]\?${DEVICE}['\"]\?\([[:space:]#]\|$\)" /etc/sysconfig/network-scripts/ifcfg-*) ; do
	    is_ignored_file "$device" && continue
	    /sbin/ifup ${device##*/} || net_log "Unable to start slave device ${device##*/} for master ${DEVICE}." warning
    done

    [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}

    # add the bits to setup the needed post enslavement parameters
    for arg in $BONDING_OPTS ; do   
        key=${arg%%=*};
        value=${arg##*=};
	if [ "${key}" = "primary" ]; then 
            echo $value > /sys/class/net/${DEVICE}/bonding/$key
	fi
    done
fi

# If the device is part of a bridge, add the device to the bridge
if [ -n "${BRIDGE}" -a -x /usr/sbin/brctl ]; then
      if [ ! -d /sys/class/net/${BRIDGE}/bridge ]; then
	  /usr/sbin/brctl addbr ${BRIDGE} 2>/dev/null
      fi
      /sbin/ip addr flush dev ${DEVICE} 2>/dev/null
      /sbin/ip link set dev ${DEVICE} up
      ethtool_set
      [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
      /usr/sbin/brctl addif ${BRIDGE} ${DEVICE}
      # add the bits to setup driver parameters here
      for arg in $BRIDGING_OPTS ; do
          key=${arg%%=*};
          value=${arg##*=};
          echo $value > /sys/class/net/${DEVICE}/brport/$key
      done
      # Upon adding a device to a bridge,
      # it's necessary to make radvd reload its config
      [ -r /var/run/radvd/radvd.pid ] && kill -HUP $(cat /var/run/radvd/radvd.pid)
      exit 0
fi
		     
if [ -n "${DYNCONFIG}" -a -x /sbin/dhclient ]; then
    if [[ "${PERSISTENT_DHCLIENT}" =  [yY1]* ]]; then
       ONESHOT="";
    else
       ONESHOT="-1";
    fi;
    generate_config_file_name
    # copy any lease obtained by the initrd
    for file in /dev/.dhclient-${DEVICE}.leases /dev/.initramfs/net.${DEVICE}.lease ; do
        if [ -f "${file}" ]; then
            mv -f $file /var/lib/dhclient/dhclient-${DEVICE}.leases
            [ -x /sbin/restorecon ] && restorecon /var/lib/dhclient/dhclient-${DEVICE}.leases > /dev/null 2>&1
        fi
    done

    if is_hostname_set; then
        # We already have the hostname ->> send it to DHCP:
        DHCLIENTARGS="${DHCLIENTARGS} -H ${DHCP_HOSTNAME:-${HOSTNAME%%.*}} ${ONESHOT} -q ${DHCLIENTCONF} -lf /var/lib/dhclient/dhclient-${DEVICE}.leases -pf /var/run/dhclient-${DEVICE}.pid"
    else
        # We need to acquire the hostname:
        DHCLIENTARGS="${DHCLIENTARGS} ${DHCP_HOSTNAME:+-H $DHCP_HOSTNAME} ${ONESHOT} -q ${DHCLIENTCONF} -lf /var/lib/dhclient/dhclient-${DEVICE}.leases -pf /var/run/dhclient-${DEVICE}.pid"
    fi

    echo
    echo -n $"Determining IP information for ${DEVICE}..."
    if [[ "${PERSISTENT_DHCLIENT}" !=  [yY1]* ]] && check_link_down ${DEVICE}; then
	echo $" failed; no link present.  Check cable?"
	exit 1
    fi

    ethtool_set

    if /sbin/dhclient ${DHCLIENTARGS} ${DEVICE} ; then
		echo $" done."
		dhcpipv4="good"
    else
		echo $" failed."
		if [[ "${IPV4_FAILURE_FATAL}"  = [Yy1]* ]] ; then
			exit 1
		fi
		if [[ "$IPV6INIT" != [yY1]* && "$DHCPV6C" != [yY1]* ]] ; then
			exit 1
		fi
		net_log "Unable to obtain IPv4 DHCP address ${DEVICE}." warning
    fi
# end dynamic device configuration
else 
    if [ -z "${IPADDR}" -a -z "${IPADDR0}" -a -z "${IPADDR1}" -a -z "${IPADDR2}" ]; then
         # enable device without IP, useful for e.g. PPPoE
	 ip link set dev ${REALDEVICE} up
	 ethtool_set
	 [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
    else
  
    expand_config

    [ -n "${ARP}" ] && \
	ip link set dev ${REALDEVICE} $(toggle_value arp $ARP)
   
    if ! ip link set dev ${REALDEVICE} up ; then
	net_log $"Failed to bring up ${DEVICE}."
	exit 1
    fi

    ethtool_set

    [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}

    if [ "${DEVICE}" = "lo" ]; then
    	SCOPE="scope host"
    else
        SCOPE=${SCOPE:-}
    fi
    
    if [ -n "$SRCADDR" ]; then
       SRC="src $SRCADDR"
    else
       SRC=
    fi
    
    # set IP address(es)
    for idx in {0..256} ; do
	if [ -z "${ipaddr[$idx]}" ]; then
            break
        fi

        if ! LC_ALL=C ip addr ls ${REALDEVICE} | LC_ALL=C grep -q "${ipaddr[$idx]}/${prefix[$idx]}" ; then
            if [ "${REALDEVICE}" != "lo" ] && [ "${arpcheck[$idx]}" != "no" ] ; then
				echo $"Determining if ip address ${ipaddr[$idx]} is already in use for device ${REALDEVICE}..."
                                if ! ARPING=$(/sbin/arping -c 2 -w ${ARPING_WAIT:-3} -D -I ${REALDEVICE} ${ipaddr[$idx]}) ; then
                                        ARPINGMAC=$(echo $ARPING |  sed -ne 's/.*\[\(.*\)\].*/\1/p')
                                        net_log $"Error, some other host ($ARPINGMAC) already uses address ${ipaddr[$idx]}."
					exit 1
				fi
			fi

            if ! ip addr add ${ipaddr[$idx]}/${prefix[$idx]} \
              brd ${broadcast[$idx]:-+} dev ${REALDEVICE} ${SCOPE} label ${DEVICE}; then
                net_log $"Error adding address ${ipaddr[$idx]} for ${DEVICE}."
            fi
        fi

        if [ -n "$SRCADDR" ]; then
               sysctl -w "net.ipv4.conf.${SYSCTLDEVICE}.arp_filter=1" >/dev/null 2>&1
        fi

        # update ARP cache of neighboring computers
        if ! is_false "${arpupdate[$idx]}" && [ "${REALDEVICE}" != "lo" ]; then
          /sbin/arping -q -A -c 1 -I ${REALDEVICE} ${ipaddr[$idx]}
          ( sleep 2;
            /sbin/arping -q -U -c 1 -I ${REALDEVICE} ${ipaddr[$idx]} ) > /dev/null 2>&1 < /dev/null &
        fi
    done

    # Set a default route.
    if [ "${DEFROUTE}" != "no" ] && [ -z "${GATEWAYDEV}" -o "${GATEWAYDEV}" = "${REALDEVICE}" ]; then
	# set up default gateway. replace if one already exists
	if [ -n "${GATEWAY}" ] && [ "$(ipcalc --network ${GATEWAY} ${netmask[0]} 2>/dev/null)" = "NETWORK=${NETWORK}" ]; then
	    ip route replace default ${METRIC:+metric $METRIC} \
		via ${GATEWAY} ${WINDOW:+window $WINDOW} ${SRC} \
		${GATEWAYDEV:+dev $GATEWAYDEV} ||
			net_log $"Error adding default gateway ${GATEWAY} for ${DEVICE}."
	elif [ "${GATEWAYDEV}" = "${DEVICE}" ]; then
	    ip route replace default ${METRIC:+metric $METRIC} \
		${SRC} ${WINDOW:+window $WINDOW} dev ${REALDEVICE} ||
			net_log $"Erorr adding default gateway for ${REALDEVICE}."
	fi
    fi
    fi
fi

# Add Zeroconf route.
if [ -z "${NOZEROCONF}" -a "${ISALIAS}" = "no" -a "${REALDEVICE}" != "lo" ]; then
    ip route add 169.254.0.0/16 dev ${REALDEVICE} metric $((1000 + $(cat /sys/class/net/${REALDEVICE}/ifindex))) scope link
fi

if [ "${TYPE}" = "Bridge" ]; then
    for arg in $BRIDGING_OPTS ; do
        key=${arg%%=*};
        value=${arg##*=};
        if [ "${key}" = "multicast_router" -o "${key}" = "hash_max" -o "${key}" = "multicast_snooping" ]; then
            echo $value > /sys/class/net/${DEVICE}/bridge/$key
        fi
    done
fi

# IPv6 initialisation?
/etc/sysconfig/network-scripts/ifup-ipv6 ${CONFIG}
if [[ "${DHCPV6C}"  = [Yy1]* ]] && [ -x /sbin/dhclient ]; then
    generate_config_file_name 6
    echo
    echo -n $"Determining IPv6 information for ${DEVICE}..."

    if is_hostname_set; then
        # We already have the hostname ->> send it to DHCP:
        DHCLIENTARGS="-6 -1 ${DHCPV6C_OPTIONS} ${DHCLIENTCONF} -lf /var/lib/dhclient/dhclient6-${DEVICE}.leases -pf /var/run/dhclient6-${DEVICE}.pid -H ${DHCP_HOSTNAME:-${HOSTNAME%%.*}} ${DEVICE}"
    else
        # We need to acquire the hostname:
        DHCLIENTARGS="-6 -1 ${DHCPV6C_OPTIONS} ${DHCLIENTCONF} -lf /var/lib/dhclient/dhclient6-${DEVICE}.leases -pf /var/run/dhclient6-${DEVICE}.pid ${DHCP_HOSTNAME:+-H $DHCP_HOSTNAME} ${DEVICE}"
    fi

    if /sbin/dhclient $DHCLIENTARGS; then
        echo $" done."
    else
        echo $" failed."
        if [ "${dhcpipv4}" = "good" -o -n "${IPADDR}" ]; then
            net_log "Unable to obtain IPv6 DHCP address ${DEVICE}." warning
        else
            exit 1
        fi
    fi
fi

exec /etc/sysconfig/network-scripts/ifup-post ${CONFIG} ${2}

